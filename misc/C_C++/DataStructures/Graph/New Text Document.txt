/*
Graphs
a router has several interfaces/ports on each side - router is big expensive machience - receives packet-looks up a tables where to send it
connections in and out, receives a packet of data that needs to be delivered - knows address of destination computer
destination      |       interface
ip addresses     |		4
ip addresss      |		6
		each router knows about every other router


			directed graph example - cannot go from 1 to 3 per say. only 1 way, down in this example
				    0
				10/  \5
				 1     2
				20\ 10/ \5
				    4    3
                                   6 \  /10
				      5

		1s are connections
	0	1	2	3	4
0	1	1	1	0	0
1	0	1	0	0	1
2	0	0	1	1	1
3	0	0	0	1	0
4	0	0	0	0	1

now need to store weights to travel through an edge - replace 1's with weights
													  replace 0s with intmax/infinities
					
	replace 1's on diagonal with 0s
weight table			to
		0	1	2	3	4
	0	0	10	5	10	15 //update with hop table
	1	00	0	00	00	20
from	2	00	00	0	5	10
	3	00	00	00	0	00
	4	00	00	00	00	0

need another table - non 0, non hop values- 
	"next hop table"
	//add a new value, update total cost in weight table
	0	1	2	3	4
0	-	1	2	2	2
1	-	-	-	-	4
2	-	-	-	3	4
3	-	-	-	-	-
4	-	-	-	-	-


need to use Dijkstra's algorthm
weight - ability to move from 1 point to	the next
				//
		-//				//-
				//

	0 connects to 1 and 1 connects to 4 therfore 0 connects to 4
			10					20						30
						
	0 connects to 2 and 2 connects to 4 therfore 0 connects to 4 - take this path
			5					10						15

finding optimal path
look for commaniality in from and two  
	common counter follows verticies (safearray container of things in the graph)
		look where the weight table from i to common is a good value

		n^3
for(int common = 0; commom < verticies.size(); common++) 
	for(int i = 0; i < verticies.size(); i +=)
		if(weightTable[i][common] != //00(infinty)) -i is from - common is to
			for(int j = 0; j <verticies.size(); j++)
				if(weightTable[common][j] != //00(infinighy) -from common  - to j
					//indirect connection from i to j
					//i->common   common->j  => i->j
					//update weight to show indirect connection -  i-common cost + common to j cost 
					//check weight table to see if old value is bigger than new value, if it is, update it
					//update hop table to show common
			


GraphAdjMatrix(int s); //initial size - graphs houdl expand appropriately - therfor needs to increce verticies, but also the weight and next top table need new row and column
weight table and next hop shoudl be created dynamically - do it in constructor, deconstruct it later
graph type is the tmplated part

safe array to hold verticies
*/

if(incomingNeighbors.size() == 0)
			{
				for(int k = 0; k < chosen.size();k++)
					if(chosen[k] == vertices[i])//checks chosen to see if it hasalready been used
					{con = false; break;}
				
					
					if(con)
					{				
						chosen.push_back(vertices[i]);
						cout<<vertices[i]<<endl;
							for(int j = 0; j < size();j++)
								weightsTable[i][j] = 0;
								i=0;
					}
			}
	}